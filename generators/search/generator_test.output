//nolint
//lint:file-ignore U1000 ignore unused code, it's generated
package model

import (
	"github.com/go-pg/pg"
	"github.com/go-pg/pg/orm"
)

// base filters
type applier func(query *orm.Query) (*orm.Query, error)

// Searcher is interface for every generated filter
type Searcher interface {
	Apply(query *orm.Query) *orm.Query
	Q() applier
}

type ProjectSearch struct {
	ID   *int
	Name *string
}

func (s *ProjectSearch) Apply(query *orm.Query) *orm.Query {
	if s.ID != nil {
		query.Where("?.? = ?", pg.F(Tables.Project.Alias), pg.F(Columns.Project.ID), s.ID)
	}
	if s.Name != nil {
		query.Where("?.? = ?", pg.F(Tables.Project.Alias), pg.F(Columns.Project.Name), s.Name)
	}

	return query
}

func (s *ProjectSearch) Q() applier {
	return func(query *orm.Query) (*orm.Query, error) {
		return s.Apply(query), nil
	}
}

type UserSearch struct {
	ID        *int
	Email     *string
	Activated *bool
	Name      *string
	CountryID *int
}

func (s *UserSearch) Apply(query *orm.Query) *orm.Query {
	if s.ID != nil {
		query.Where("?.? = ?", pg.F(Tables.User.Alias), pg.F(Columns.User.ID), s.ID)
	}
	if s.Email != nil {
		query.Where("?.? = ?", pg.F(Tables.User.Alias), pg.F(Columns.User.Email), s.Email)
	}
	if s.Activated != nil {
		query.Where("?.? = ?", pg.F(Tables.User.Alias), pg.F(Columns.User.Activated), s.Activated)
	}
	if s.Name != nil {
		query.Where("?.? = ?", pg.F(Tables.User.Alias), pg.F(Columns.User.Name), s.Name)
	}
	if s.CountryID != nil {
		query.Where("?.? = ?", pg.F(Tables.User.Alias), pg.F(Columns.User.CountryID), s.CountryID)
	}

	return query
}

func (s *UserSearch) Q() applier {
	return func(query *orm.Query) (*orm.Query, error) {
		return s.Apply(query), nil
	}
}

type GeoCountrySearch struct {
	ID   *int
	Code *string
}

func (s *GeoCountrySearch) Apply(query *orm.Query) *orm.Query {
	if s.ID != nil {
		query.Where("?.? = ?", pg.F(Tables.GeoCountry.Alias), pg.F(Columns.GeoCountry.ID), s.ID)
	}
	if s.Code != nil {
		query.Where("?.? = ?", pg.F(Tables.GeoCountry.Alias), pg.F(Columns.GeoCountry.Code), s.Code)
	}

	return query
}

func (s *GeoCountrySearch) Q() applier {
	return func(query *orm.Query) (*orm.Query, error) {
		return s.Apply(query), nil
	}
}
